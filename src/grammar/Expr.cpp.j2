module cpplox:Expr;

import :Token;
import std;

namespace cpplox {

namespace expr {
{%- for elem in data.grammar %}
export struct {{ elem.type }}; 
{%- endfor %}
} // namespace expr

export using Expr = std::variant<
    expr::{{ data.grammar|map(attribute='type')|join(',\n    expr::') }}
>;

namespace expr {
{%- for elem in data.grammar %}
export struct {{ elem.type }} {
  {%- for param in elem.params %}
    {%- if param.type is defined %}
      {{ param.type }} {{ param.name }};
    {%- else %}
      std::unique_ptr<Expr> {{ param.name }};
    {%- endif %}
  {%- endfor %}
};
{%- endfor %}
} // namespace expr

} // namespace cpplox
