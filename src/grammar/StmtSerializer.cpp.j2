module cpplox:StmtSerializer;

import std;
import yaml_cpp;

import :Expr;
import :ExprSerializer;
import :Stmt;

namespace cpplox {

export class StmtSerializer
{
public:
    explicit StmtSerializer(YAML::Emitter & emitter)
        : m_emitter(emitter)
    {}

{%- for elem in data.grammar %}
    auto operator()(const stmt::{{ elem.type }} & stmt) -> void
    {
        m_emitter << YAML::BeginMap;
        m_emitter << YAML::Key << "type";
        m_emitter << YAML::Value << "{{ elem.type }}";

        m_emitter << YAML::Key << "params";
        m_emitter << YAML::Value;
        m_emitter << YAML::BeginMap;

        {%- for param in elem.params %}
        m_emitter << YAML::Key << "{{ param.name }}";
        m_emitter << YAML::Value;
        this->operator()(stmt.{{ param.name }});
        {%- endfor %}

        m_emitter << YAML::EndMap;
        m_emitter << YAML::EndMap;
    }
{%- endfor %}

    auto operator()(const cpplox::StmtPtr & stmt) -> void
    {
        std::visit(*this, *stmt);
    }

    auto operator()(const cpplox::ExprPtr & expr) -> void
    {
        std::visit(ExprSerializer{m_emitter}, *expr);
    }

    auto operator()(const Token& token) -> void
    {
        m_emitter << YAML::BeginMap;
        m_emitter << YAML::Key << "type" << YAML::Value << std::format("{}", token.get_type());
        m_emitter << YAML::Key << "lexeme" << YAML::Value << std::format("{}", token.get_lexeme());

        if (!std::holds_alternative<Token::EmptyLiteral>(token.get_literal())) {
            m_emitter << YAML::Key << "literal" << YAML::Value;
            this->operator()(token.get_literal());
        }

        m_emitter << YAML::EndMap;
    }

    auto operator()(const Token::Literal& literal) -> void
    {
        m_emitter << std::format("{}", literal);
    }

    auto operator()(const std::ranges::range auto & seq) -> void
    {
        m_emitter << YAML::BeginSeq;
        for (const auto & item : seq) {
            this->operator()(item);
        }
        m_emitter << YAML::EndSeq;
    }

    template<typename T>
    auto operator()(const std::optional<T> & item) -> void
    {
        if (item.has_value()) {
            this->operator()(item.value());
        } else {
            m_emitter << "<empty>";
        }
    }

private:
    YAML::Emitter & m_emitter;
};

} // namespace cpplox
